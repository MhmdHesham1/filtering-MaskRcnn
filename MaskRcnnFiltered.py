# -*- coding: utf-8 -*-
"""CLS_Lab_4_CNN_Mask_RCNN_(_Day_4_).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19fiB_CK3eFYb7nAifRXOby2SewRZkZgw
"""

!git clone https://github.com/alsombra/Mask_RCNN-TF2  # updated repository

cd Mask_RCNN-TF2

pwd

!pip install -r requirements.txt

!python setup.py install

cd ..

pwd

!pip install numpy==1.23.1

import os
import sys
import cv2
import numpy as np
import skimage.io
from google.colab.patches import cv2_imshow
import matplotlib.pyplot as plt

import tensorflow as tf

tf.__version__

ROOT_DIR = os.path.abspath('./Mask_RCNN-TF2')
ROOT_DIR

sys.path

sys.path.append(ROOT_DIR)

sys.path

from mrcnn import utils
from mrcnn import visualize
import mrcnn.model as modellib

sys.path.append(os.path.join(ROOT_DIR , 'samples/coco'))

sys.path

import coco

MODEL_DIR = os.path.join(ROOT_DIR, 'logs')
IMG_DIR = os.path.join(ROOT_DIR, 'images')

sys.path

MODEL_DIR, IMG_DIR

from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession
config=ConfigProto()
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)

COCO_MODEL_PATH = os.path.join(ROOT_DIR, 'mask_rcnn_coco.h5')

utils.download_trained_weights(COCO_MODEL_PATH)

class InferenceConfig(coco.CocoConfig):
  GPU_COUNT = 1
  IMAGES_PER_GPU = 1

config = InferenceConfig()

config.display()

MODEL_DIR

network = modellib.MaskRCNN(mode='inference' , model_dir=MODEL_DIR, config=config)

network.load_weights(COCO_MODEL_PATH, by_name=True)

class_names = ['BG', 'person', 'bicycle', 'car', 'motorcycle', 'airplane',
              'bus', 'train', 'truck', 'boat', 'traffic light',
              'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird',
              'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear',
              'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie',
              'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',
              'kite', 'baseball bat', 'baseball glove', 'skateboard',
              'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup',
              'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',
              'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',
              'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed',
              'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote',
              'keyboard', 'cell phone', 'microwave', 'oven', 'toaster',
              'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors',
              'teddy bear', 'hair drier', 'toothbrush']

len(class_names)

image2 = cv2.imread('/content/65055463a1664564e41389a40d8f902f.jpg')
plt.imshow(image2)

image = skimage.io.imread('/content/65055463a1664564e41389a40d8f902f.jpg')
plt.imshow(image)

!pip install numpy==1.23.1

results = network.detect([image], verbose=0)
results

!pip install numpy==1.23.1

r = results[0]

def Detect(manga):
    for i in class_names:
      if manga == i:
          # Filter detections to only include the specified manga class
          manga_class_id = class_names.index(manga)
          manga_indices = [i for i, class_id in enumerate(r['class_ids']) if class_id == manga_class_id]

          # Filter results for the specified manga class
          manga_rois = r['rois'][manga_indices]
          manga_masks = r['masks'][:, :, manga_indices]
          manga_class_ids = r['class_ids'][manga_indices]
          manga_scores = r['scores'][manga_indices]

          return visualize.display_instances(image, manga_rois, manga_masks, manga_class_ids, class_names, manga_scores)
    print("the model Can't predict this object")

Detect("motorcycle")